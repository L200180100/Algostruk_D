import time
import random
import timeit
import matplotlib.pyplot as plt

def jumlahkan_cara_1(n):
    hasilnya = 0
    for i in range(1, n+1):
        hasilnya = hasilnya + i
    return hasilnya

def jumlahkan_cara_2(n):
    return (n*(n + 1))/2
            
for i in range(5):
    awal = time.time()
    h = jumlahkan_cara_2(1000000)
    akhir = time.time()
    print('Jumlah adalah %d, memerlukan %9.8f detik' %(h, akhir-awal))

##10.3
Insertion Sort
def insertionSort(A):
    n = len(A)
    for i in range(1, n):
        nilai = A[i]
        pos = i
        while pos > 0 and nilai < A[pos - 1]:
            A[pos] = A[pos - 1]
            pos = pos - 1
            A[pos] = nilai

##Average case scenario
for i in range(5):
    L = list(range(3000))
    random.shuffle(L)
    awal = time.time()
    U = insertionSort(L)
    akhir = time.time()
    print('Mengurutkan %d bilangan, memerlukan %8.7f detik' % (len(L), akhir-awal))

##Worst case scenario
for i in range(5):
    L = list(range(3000))
    L = L[::-1]
    awal = time.time()
    U = insertionSort(L)
    akhir = time.time()
    print('Mengurutkan %d bilangan, memerlukan %8.7f detik' % (len(L), akhir-awal))

##Best case scenario
for i in range(5):
    L = list(range(3000))
    
    awal = time.time()
    U = insertionSort(L)
    akhir = time.time()
    print('Mengurutkan %d bilangan, memerlukan %8.7f detik' % (len(L), akhir-awal))

    
##10.5.1
def kalangBersusuh(n):
    for i in range(n):
        for j in range(n):
            i+j

def ujiKalangBersusuh(n):
    ls = []
    jangkauan = range(1, n+1)
    siap = 'from __main__ import kalangBersusuh'
    for i in jangkauan:
        print('i =', i)
        t = timeit.timeit('kalangBersusuh(' + str(i) + ')', setup = siap, number = 1)
        ls.append(t)
    return ls

n = 1000
LS = ujiKalangBersusuh(n)

plt.plot(LS)
skala = 7700000
plt.plot([x*x/skala for x in range(1, n+1)])
plt.show()
